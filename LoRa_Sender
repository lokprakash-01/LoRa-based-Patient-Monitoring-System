#include <HX711_ADC.h>
#include <EEPROM.h>
#include <SPI.h>
#include <LoRa.h>
#include <Wire.h>
#include <Adafruit_MLX90614.h>
#define USE_ARDUINO_INTERRUPTS true    // Set-up low-level interrupts for most acurate BPM math
#include <PulseSensorPlayground.h>
//pins:
const int HX711_dout_1 = 4; //mcu > HX711 no 1 dout pin
const int HX711_sck_1 = 5; //mcu > HX711 no 1 sck pin
const int HX711_dout_2 = 6; //mcu > HX711 no 2 dout pin
const int HX711_sck_2 = 7; //mcu > HX711 no 2 sck pin
int counter = 0;

int val,b;
int temp,temp1,myBPM;
int const PULSE_SENSOR_PIN = 0;
int Threshold = 550;
float cel=0;
Adafruit_MLX90614 mlx = Adafruit_MLX90614();
   // 'S' Signal pin connected to A0
int Signal;
int Signal2;
//HX711 constructor (dout pin, sck pin)
HX711_ADC LoadCell_1(HX711_dout_1, HX711_sck_1); //HX711 1
HX711_ADC LoadCell_2(HX711_dout_2, HX711_sck_2); //HX711 2

const int calVal_eepromAdress_1 = 0; // eeprom adress for calibration value load cell 1 (4 bytes)
const int calVal_eepromAdress_2 = 4; // eeprom adress for calibration value load cell 2 (4 bytes)
long t;

void setup() {
  loadcellsetup();
  loRa();
  tempsen();
  pulse();

}

void loop() {
  loadcell();
  sensors();
  sensorpulse();
  }
 
void pulse()
{
 
}
 void loadcellsetup(){
    Serial.begin(57600);
  Serial.println();
  Serial.println("Starting...");

  float calibrationValue_1; // calibration value load cell 1
  float calibrationValue_2; // calibration value load cell 2

  calibrationValue_1 = 696.0; // uncomment this if you want to set this value in the sketch
  calibrationValue_2 = 733.0; // uncomment this if you want to set this value in the sketch
#if defined(ESP8266) || defined(ESP32)
  //EEPROM.begin(512); // uncomment this if you use ESP8266 and want to fetch the value from eeprom
#endif
  //EEPROM.get(calVal_eepromAdress_1, calibrationValue_1); // uncomment this if you want to fetch the value from eeprom
  //EEPROM.get(calVal_eepromAdress_2, calibrationValue_2); // uncomment this if you want to fetch the value from eeprom

  LoadCell_1.begin();
  LoadCell_2.begin();
  long stabilizingtime = 2000; // tare preciscion can be improved by adding a few seconds of stabilizing time
  boolean _tare = true; //set this to false if you don't want tare to be performed in the next step
  byte loadcell_1_rdy = 0;
  byte loadcell_2_rdy = 0;
  while ((loadcell_1_rdy + loadcell_2_rdy) < 2) { //run startup, stabilization and tare, both modules simultaniously
    if (!loadcell_1_rdy) loadcell_1_rdy = LoadCell_1.startMultiple(stabilizingtime, _tare);
    if (!loadcell_2_rdy) loadcell_2_rdy = LoadCell_2.startMultiple(stabilizingtime, _tare);
  }
  if (LoadCell_1.getTareTimeoutFlag()) {
    Serial.println("Timeout, check MCU>HX711 no.1 wiring and pin designations");
  }
 
  LoadCell_1.setCalFactor(calibrationValue_1); // user set calibration value (float)
 
  Serial.println("Startup is complete");
 
 }
 void tempsen()
 {
  while (!Serial);

  if (!mlx.begin()) {
    Serial.println("Error connecting to MLX sensor. Check wiring.");
    while (1);
  };
 }
 void sensors(){
 

 float temp1;
  temp1=Serial.print(mlx.readObjectTempC()); Serial.println("*C");
   Serial.println(temp1);
}
 
void loadcell(){
  static boolean newDataReady = 0;
  const int serialPrintInterval = 0; //increase value to slow down serial print activity

  // check for new data/start next conversion:
  if (LoadCell_1.update()) newDataReady = true;
  LoadCell_2.update();

  //get smoothed value from data set
  if ((newDataReady)) {
    if (millis() > t + serialPrintInterval) {
      float a = LoadCell_1.getData();
     
      //Serial.print("Load_cell 1 output val: ");
    //  Serial.println(a);
      String LoRaMessage = String(Signal2) + "/" + String(mlx.readObjectTempC()) + "&" + String(a) + "#" + String(temp1);
         LoRa.print(LoRaMessage);
         
         
      newDataReady = 0;
      t = millis();
       LoRa.beginPacket();
       LoRa.print(LoRaMessage);
       LoRa.println();
        LoRa.endPacket();
       

        counter++;

        delay(100);
    }
  }

  // receive command from serial terminal, send 't' to initiate tare operation:
  if (Serial.available() > 0) {
    float i;
    char inByte = Serial.read();
    if (inByte == 't') {
      LoadCell_1.tareNoDelay();
     
    }
  }

  //check if last tare operation is complete
  if (LoadCell_1.getTareStatus() == true) {
    Serial.println("Tare load cell 1 complete");
  }

 }
void loRa(){
    Serial.begin(57600);
    while (!Serial);


  if (!LoRa.begin(8E6))
  {
    Serial.println("Starting LoRa failed!");
    while (1);
  }
}
void sensorpulse()
{
 Signal = analogRead(PULSE_SENSOR_PIN); // Read the sensor value

 Serial.print(Signal);
 Signal2=Signal-440;
}

